import TSClassParser from '../../TSClassParser';
import MarkdownGenerator from '../../MarkdownGenerator';

const file = 'api-gen/__tests__/fixtures/ObjectTypeComposer.d.ts';

it('markdown ObjectTypeComposer.d.ts', () => {
  const data = TSClassParser.parseFile(file);
  expect(MarkdownGenerator.generate(data.class, data.interfaces)).toMatchInlineSnapshot(`
"---
id: ObjectTypeComposer
title: ObjectTypeComposer
---

<!-- 
ðŸ›‘ðŸ›‘ðŸ›‘
DO NOT EDIT THIS FILE!
IT WAS AUTOGENERATED FROM d.ts FILE

If you want to make changes in this file, please do it via
https://github.com/graphql-compose/graphql-compose/blob/master/src/ObjectTypeComposer.d.ts
-->

## Static methods

### static create()

\`\`\`js
static create(
  typeDef: any,
  schemaComposer: any,
): ObjectTypeComposer<TSrc, TCtx>
\`\`\`

### static createTemp()

\`\`\`js
static createTemp(
  typeDef: any,
  schemaComposer: any,
): ObjectTypeComposer<TSrc, TCtx>
\`\`\`

## Properties

### schemaComposer

\`\`\`js
schemaComposer: any;
\`\`\`

## Field methods

### getFields()

\`\`\`js
getFields(): any
\`\`\`

### getFieldNames()

\`\`\`js
getFieldNames(): string[]
\`\`\`

### setFields()

\`\`\`js
setFields(
  fields: any,
): this
\`\`\`

### hasField()

\`\`\`js
hasField(
  fieldName: string,
): boolean
\`\`\`

### setField()

\`\`\`js
setField(
  fieldName: string,
  fieldConfig: any,
): this
\`\`\`

### addFields()

Add new fields or replace existed in a GraphQL type

\`\`\`js
addFields(
  newFields: any,
): this
\`\`\`

### addNestedFields()

Add new fields or replace existed (where field name may have dots)

\`\`\`js
addNestedFields(
  newFields: any,
): this
\`\`\`

### getField()

\`\`\`js
getField(
  fieldName: string,
): any
\`\`\`

### removeField()

\`\`\`js
removeField(
  fieldNameOrArray: string | string[],
): this
\`\`\`

### removeOtherFields()

\`\`\`js
removeOtherFields(
  fieldNameOrArray: string | string[],
): this
\`\`\`

### extendField()

\`\`\`js
extendField(
  fieldName: string,
  partialFieldConfig: Partial<any>,
): this
\`\`\`

### reorderFields()

\`\`\`js
reorderFields(
  names: string[],
): this
\`\`\`

### isFieldNonNull()

\`\`\`js
isFieldNonNull(
  fieldName: string,
): boolean
\`\`\`

### getFieldConfig()

\`\`\`js
getFieldConfig(
  fieldName: string,
): any
\`\`\`

### getFieldType()

\`\`\`js
getFieldType(
  fieldName: string,
): any
\`\`\`

### getFieldTC()

\`\`\`js
getFieldTC(
  fieldName: string,
): ObjectTypeComposer<TSource, TContext>
\`\`\`

### makeFieldNonNull()

\`\`\`js
makeFieldNonNull(
  fieldNameOrArray: string | string[],
): this
\`\`\`

### makeFieldNullable()

\`\`\`js
makeFieldNullable(
  fieldNameOrArray: string | string[],
): this
\`\`\`

### deprecateFields()

\`\`\`js
deprecateFields(
  fields: string | string[] | { [fieldName: string]: string; },
): this
\`\`\`

### getFieldArgs()

\`\`\`js
getFieldArgs(
  fieldName: string,
): any
\`\`\`

### hasFieldArg()

\`\`\`js
hasFieldArg(
  fieldName: string,
  argName: string,
): boolean
\`\`\`

### getFieldArg()

\`\`\`js
getFieldArg(
  fieldName: string,
  argName: string,
): any
\`\`\`

### getFieldArgType()

\`\`\`js
getFieldArgType(
  fieldName: string,
  argName: string,
): any
\`\`\`

## Type methods

### getType()

\`\`\`js
getType(): any
\`\`\`

### getTypePlural()

\`\`\`js
getTypePlural(): any
\`\`\`

### getTypeNonNull()

\`\`\`js
getTypeNonNull(): any
\`\`\`

### getTypeName()

\`\`\`js
getTypeName(): string
\`\`\`

### setTypeName()

\`\`\`js
setTypeName(
  name: string,
): this
\`\`\`

### getDescription()

\`\`\`js
getDescription(): string
\`\`\`

### setDescription()

\`\`\`js
setDescription(
  description: string,
): this
\`\`\`

### clone()

\`\`\`js
clone(
  newTypeName: string,
): ObjectTypeComposer<TCloneSource, TContext>
\`\`\`

### getIsTypeOf()

\`\`\`js
getIsTypeOf(): any
\`\`\`

### setIsTypeOf()

\`\`\`js
setIsTypeOf(
  fn: any,
): this
\`\`\`

## InputType methods

### getInputType()

\`\`\`js
getInputType(): any
\`\`\`

### hasInputTypeComposer()

\`\`\`js
hasInputTypeComposer(): boolean
\`\`\`

### setInputTypeComposer()

\`\`\`js
setInputTypeComposer(
  itc: any,
): this
\`\`\`

### getInputTypeComposer()

\`\`\`js
getInputTypeComposer(): any
\`\`\`

### getITC()

\`\`\`js
getITC(): any
\`\`\`

### removeInputTypeComposer()

\`\`\`js
removeInputTypeComposer(): this
\`\`\`

## Resolver methods

### getResolvers()

\`\`\`js
getResolvers(): Map<string, any>
\`\`\`

### hasResolver()

\`\`\`js
hasResolver(
  name: string,
): boolean
\`\`\`

### getResolver()

\`\`\`js
getResolver(
  name: string,
  middlewares: any[],
): any
\`\`\`

### setResolver()

\`\`\`js
setResolver(
  name: string,
  resolver: any,
): this
\`\`\`

### addResolver()

\`\`\`js
addResolver(
  resolver: any,
): this
\`\`\`

### removeResolver()

\`\`\`js
removeResolver(
  resolverName: string,
): this
\`\`\`

### wrapResolver()

\`\`\`js
wrapResolver(
  resolverName: string,
  cbResolver: any,
): this
\`\`\`

### wrapResolverAs()

\`\`\`js
wrapResolverAs(
  resolverName: string,
  fromResolverName: string,
  cbResolver: any,
): this
\`\`\`

### wrapResolverResolve()

\`\`\`js
wrapResolverResolve(
  resolverName: string,
  cbNextRp: any,
): this
\`\`\`

## Interface methods

### getInterfaces()

\`\`\`js
getInterfaces(): any[]
\`\`\`

### setInterfaces()

\`\`\`js
setInterfaces(
  interfaces: any[],
): this
\`\`\`

### hasInterface()

\`\`\`js
hasInterface(
  iface: any,
): boolean
\`\`\`

### addInterface()

\`\`\`js
addInterface(
  interfaceObj: any,
): this
\`\`\`

### removeInterface()

\`\`\`js
removeInterface(
  interfaceObj: any,
): this
\`\`\`

## Extensions methods

### getExtensions()

\`\`\`js
getExtensions(): any
\`\`\`

### setExtensions()

\`\`\`js
setExtensions(
  extensions: any,
): this
\`\`\`

### extendExtensions()

\`\`\`js
extendExtensions(
  extensions: any,
): this
\`\`\`

### clearExtensions()

\`\`\`js
clearExtensions(): this
\`\`\`

### getExtension()

\`\`\`js
getExtension(
  extensionName: string,
): any
\`\`\`

### hasExtension()

\`\`\`js
hasExtension(
  extensionName: string,
): boolean
\`\`\`

### setExtension()

\`\`\`js
setExtension(
  extensionName: string,
  value: any,
): this
\`\`\`

### removeExtension()

\`\`\`js
removeExtension(
  extensionName: string,
): this
\`\`\`

### getFieldExtensions()

\`\`\`js
getFieldExtensions(
  fieldName: string,
): any
\`\`\`

### setFieldExtensions()

\`\`\`js
setFieldExtensions(
  fieldName: string,
  extensions: any,
): this
\`\`\`

### extendFieldExtensions()

\`\`\`js
extendFieldExtensions(
  fieldName: string,
  extensions: any,
): this
\`\`\`

### clearFieldExtensions()

\`\`\`js
clearFieldExtensions(
  fieldName: string,
): this
\`\`\`

### getFieldExtension()

\`\`\`js
getFieldExtension(
  fieldName: string,
  extensionName: string,
): any
\`\`\`

### hasFieldExtension()

\`\`\`js
hasFieldExtension(
  fieldName: string,
  extensionName: string,
): boolean
\`\`\`

### setFieldExtension()

\`\`\`js
setFieldExtension(
  fieldName: string,
  extensionName: string,
  value: any,
): this
\`\`\`

### removeFieldExtension()

\`\`\`js
removeFieldExtension(
  fieldName: string,
  extensionName: string,
): this
\`\`\`

## Misc methods

### addRelation()

\`\`\`js
addRelation(
  fieldName: string,
  relationOpts: RelationOpts<TRelationSource, TSource, TContext, TArgs>,
): this
\`\`\`

### getRelations()

\`\`\`js
getRelations(): RelationThunkMap<any, TContext>
\`\`\`

### setRecordIdFn()

\`\`\`js
setRecordIdFn(
  fn: GetRecordIdFn<TSource, TContext>,
): this
\`\`\`

### hasRecordIdFn()

\`\`\`js
hasRecordIdFn(): boolean
\`\`\`

### getRecordIdFn()

\`\`\`js
getRecordIdFn(): GetRecordIdFn<TSource, TContext>
\`\`\`

### getRecordId()

Get function that returns record id, from provided object.

\`\`\`js
getRecordId(
  source: TSource,
  args: ArgsMap,
  context: TContext,
): string | number
\`\`\`

### get()

\`\`\`js
get(
  path: string | string[],
): any
\`\`\`

## Internal type definitions

###  GetRecordIdFn

\`\`\`js
export type GetRecordIdFn<TSource, TContext> = (
  source: TSource,
  args: any,
  context: TContext
) => string;
\`\`\`

###  GraphQLObjectTypeExtended

\`\`\`js
export type GraphQLObjectTypeExtended<TSource, TContext> = GraphQLObjectType & {
  _gqcInputTypeComposer?: InputTypeComposer<TContext>;
  _gqcResolvers?: Map<string, Resolver<TSource, TContext>>;
  _gqcGetRecordIdFn?: GetRecordIdFn<TSource, TContext>;
  _gqcRelations?: RelationThunkMap<TSource, TContext>;
  _gqcFields?: ComposeFieldConfigMap<TSource, TContext>;
  _gqcInterfaces?: Array<GraphQLInterfaceType | InterfaceTypeComposer<any, TContext>>;
  _gqcExtensions?: Extensions;
  description: string | null;
};
\`\`\`

###  ComposeObjectTypeConfig

\`\`\`js
export type ComposeObjectTypeConfig<TSource, TContext> = {
  name: string;
  interfaces?: Thunk<GraphQLInterfaceType[] | null>;
  fields?: Thunk<ComposeFieldConfigMap<TSource, TContext>>;
  isTypeOf?: GraphQLIsTypeOfFn<TSource, TContext> | null;
  description?: string | null;
  isIntrospection?: boolean;
  extensions?: Extensions;
};
\`\`\`

###  ComposeFieldConfigMap

\`\`\`js
// extended GraphQLFieldConfigMap
export type ComposeFieldConfigMap<TSource, TContext> = ObjMap<
  ComposeFieldConfig<TSource, TContext>
>;
\`\`\`

###  ComposeFieldConfig

\`\`\`js
export type ComposeFieldConfig<TSource, TContext, TArgs = ArgsMap> =
  | ComposeFieldConfigAsObject<TSource, TContext, TArgs>
  | ComposeOutputType<any /* TReturn */, TContext>
  | Thunk<
      | ComposeFieldConfigAsObject<TSource, TContext, TArgs>
      | ComposeOutputType<any /* TReturn */, TContext>
    >;
\`\`\`

###  GraphqlFieldConfigExtended

\`\`\`js
// extended GraphQLFieldConfig
export type GraphqlFieldConfigExtended<TSource, TContext> = GraphQLFieldConfig<
  TSource,
  TContext
> & { projection?: any };
\`\`\`

###  ComposeFieldConfigAsObject

\`\`\`js
export type ComposeFieldConfigAsObject<TSource, TContext, TArgs = ArgsMap> = {
  type: Thunk<ComposeOutputType<any /* TReturn */, TContext>> | GraphQLOutputType;
  args?: ComposeFieldConfigArgumentMap<TArgs>;
  resolve?: GraphQLFieldResolver<TSource, TContext, TArgs>;
  subscribe?: GraphQLFieldResolver<TSource, TContext>;
  deprecationReason?: string | null;
  description?: string | null;
  astNode?: FieldDefinitionNode | null;
  extensions?: Extensions;
  [key: string]: any;
} & { $call?: void };
\`\`\`

###  ComposeOutputType

\`\`\`js
// Output type should not have \`TSource\`. It should not affect on main Type source!
// extended GraphQLOutputType
export type ComposeOutputType<TReturn, TContext> =
  | GraphQLOutputType
  | ObjectTypeComposer<TReturn, TContext>
  | EnumTypeComposer<TContext>
  | ScalarTypeComposer<TContext>
  | TypeAsString
  | Resolver<any, TContext, any>
  | InterfaceTypeComposer<TReturn, TContext>
  | UnionTypeComposer<TReturn, TContext>
  | Array<
      | GraphQLOutputType
      | ObjectTypeComposer<TReturn, TContext>
      | EnumTypeComposer<TContext>
      | ScalarTypeComposer<TContext>
      | TypeAsString
      | Resolver<any, TContext, any>
      | InterfaceTypeComposer<TReturn, TContext>
      | UnionTypeComposer<TReturn, TContext>
    >;
\`\`\`

###  ArgsMap

\`\`\`js
// Compose Args -----------------------------
export type ArgsMap = { [argName: string]: any };
\`\`\`

###  ComposeArgumentType

\`\`\`js
export type ComposeArgumentType =
  | GraphQLInputType
  | TypeAsString
  | InputTypeComposer<any>
  | EnumTypeComposer<any>
  | ScalarTypeComposer<any>
  | Array<
      | GraphQLInputType
      | TypeAsString
      | InputTypeComposer<any>
      | EnumTypeComposer<any>
      | ScalarTypeComposer<any>
    >;
\`\`\`

###  ComposeArgumentConfigAsObject

\`\`\`js
export type ComposeArgumentConfigAsObject = {
  type: Thunk<ComposeArgumentType> | GraphQLInputType;
  defaultValue?: any;
  description?: string | null;
  astNode?: InputValueDefinitionNode | null;
} & { $call?: void };
\`\`\`

###  ComposeArgumentConfig

\`\`\`js
export type ComposeArgumentConfig =
  | ComposeArgumentConfigAsObject
  | ComposeArgumentType
  | (() => ComposeArgumentConfigAsObject | ComposeArgumentType);
\`\`\`

###  ComposeFieldConfigArgumentMap

\`\`\`js
export type ComposeFieldConfigArgumentMap<TArgs = ArgsMap> = {
  [argName in keyof TArgs]: ComposeArgumentConfig
};
\`\`\`

###  RelationThunkMap

\`\`\`js
// RELATION -----------------------------
export type RelationThunkMap<TSource, TContext> = {
  [fieldName: string]: Thunk<RelationOpts<TSource, TContext, ArgsMap>>;
};
\`\`\`

###  RelationOpts

\`\`\`js
export type RelationOpts<TRelationSource, TSource, TContext, TArgs = ArgsMap> =
  | RelationOptsWithResolver<TRelationSource, TSource, TContext, TArgs>
  | RelationOptsWithFieldConfig<TSource, TContext, TArgs>;
\`\`\`

###  RelationOptsWithResolver

\`\`\`js
export type RelationOptsWithResolver<TRelationSource, TSource, TContext, TArgs = ArgsMap> = {
  resolver: Thunk<Resolver<TRelationSource, TContext, TArgs>>;
  prepareArgs?: RelationArgsMapper<TSource, TContext, TArgs>;
  projection?: Partial<ProjectionType>;
  description?: string | null;
  deprecationReason?: string | null;
  catchErrors?: boolean;
};
\`\`\`

###  RelationOptsWithFieldConfig

\`\`\`js
export type RelationOptsWithFieldConfig<
  TSource,
  TContext,
  TArgs = ArgsMap
> = ComposeFieldConfigAsObject<TSource, TContext, TArgs> & {
  resolve: GraphQLFieldResolver<TSource, TContext, TArgs>;
};
\`\`\`

###  RelationArgsMapperFn

\`\`\`js
export type RelationArgsMapperFn<TSource, TContext, TArgs = ArgsMap> = (
  source: TSource,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => any;
\`\`\`

###  RelationArgsMapper

\`\`\`js
export type RelationArgsMapper<TSource, TContext, TArgs = ArgsMap> = {
  [argName: string]:
    | { [key: string]: any }
    | RelationArgsMapperFn<TSource, TContext, TArgs>
    | null
    | void
    | string
    | number
    | any[];
};
\`\`\`

###  ObjectTypeComposeDefinition

\`\`\`js
export type ObjectTypeComposeDefinition<TSource, TContext> =
  | TypeAsString
  | ComposeObjectTypeConfig<TSource, TContext>
  | GraphQLObjectType;
\`\`\`

"
`);
});

it('parse ObjectTypeComposer.d.ts', () => {
  expect(TSClassParser.parseFile(file)).toMatchInlineSnapshot(`
Object {
  "class": Object {
    "constructors": Array [
      Object {
        "documentation": "",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "gqType",
            "type": "any",
          },
          Object {
            "documentation": "",
            "name": "schemaComposer",
            "type": "any",
          },
        ],
        "type": "ObjectTypeComposer<TSource, TContext>",
      },
    ],
    "documentation": "",
    "methods": Array [
      Object {
        "documentation": "-----------------------------------------------
Field methods
-----------------------------------------------",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFields",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldNames",
        "parameters": Array [],
        "type": "string[]",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setFields",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fields",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasField",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setField",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "fieldConfig",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "Add new fields or replace existed in a GraphQL type",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "addFields",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "newFields",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "Add new fields or replace existed (where field name may have dots)",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "addNestedFields",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "newFields",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getField",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "removeField",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldNameOrArray",
            "type": "string | string[]",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "removeOtherFields",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldNameOrArray",
            "type": "string | string[]",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "extendField",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "partialFieldConfig",
            "type": "Partial<any>",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "reorderFields",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "names",
            "type": "string[]",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "isFieldNonNull",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldConfig",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldType",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldTC",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "ObjectTypeComposer<TSource, TContext>",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "makeFieldNonNull",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldNameOrArray",
            "type": "string | string[]",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "makeFieldNullable",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldNameOrArray",
            "type": "string | string[]",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "deprecateFields",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fields",
            "type": "string | string[] | { [fieldName: string]: string; }",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldArgs",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasFieldArg",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "argName",
            "type": "string",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldArg",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "argName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldArgType",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "argName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "-----------------------------------------------
Type methods
-----------------------------------------------",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getType",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getTypePlural",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getTypeNonNull",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getTypeName",
        "parameters": Array [],
        "type": "string",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setTypeName",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "name",
            "type": "string",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getDescription",
        "parameters": Array [],
        "type": "string",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setDescription",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "description",
            "type": "string",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "clone",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "newTypeName",
            "type": "string",
          },
        ],
        "type": "ObjectTypeComposer<TCloneSource, TContext>",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getIsTypeOf",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setIsTypeOf",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fn",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "-----------------------------------------------
InputType methods
-----------------------------------------------",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getInputType",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasInputTypeComposer",
        "parameters": Array [],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setInputTypeComposer",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "itc",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getInputTypeComposer",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getITC",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "removeInputTypeComposer",
        "parameters": Array [],
        "type": "this",
      },
      Object {
        "documentation": "-----------------------------------------------
Resolver methods
-----------------------------------------------",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getResolvers",
        "parameters": Array [],
        "type": "Map<string, any>",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasResolver",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "name",
            "type": "string",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getResolver",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "name",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "middlewares",
            "type": "any[]",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setResolver",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "name",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "resolver",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "addResolver",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "resolver",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "removeResolver",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "resolverName",
            "type": "string",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "wrapResolver",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "resolverName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "cbResolver",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "wrapResolverAs",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "resolverName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "fromResolverName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "cbResolver",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "wrapResolverResolve",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "resolverName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "cbNextRp",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "-----------------------------------------------
Interface methods
-----------------------------------------------",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getInterfaces",
        "parameters": Array [],
        "type": "any[]",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setInterfaces",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "interfaces",
            "type": "any[]",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasInterface",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "iface",
            "type": "any",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "addInterface",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "interfaceObj",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "removeInterface",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "interfaceObj",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "-----------------------------------------------
Extensions methods
-----------------------------------------------",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getExtensions",
        "parameters": Array [],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setExtensions",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "extensions",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "extendExtensions",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "extensions",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "clearExtensions",
        "parameters": Array [],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getExtension",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "extensionName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasExtension",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "extensionName",
            "type": "string",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setExtension",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "extensionName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "value",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "removeExtension",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "extensionName",
            "type": "string",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldExtensions",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setFieldExtensions",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "extensions",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "extendFieldExtensions",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "extensions",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "clearFieldExtensions",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getFieldExtension",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "extensionName",
            "type": "string",
          },
        ],
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasFieldExtension",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "extensionName",
            "type": "string",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setFieldExtension",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "extensionName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "value",
            "type": "any",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "removeFieldExtension",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "extensionName",
            "type": "string",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "-----------------------------------------------
Misc methods
-----------------------------------------------",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "addRelation",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fieldName",
            "type": "string",
          },
          Object {
            "documentation": "",
            "name": "relationOpts",
            "type": "RelationOpts<TRelationSource, TSource, TContext, TArgs>",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getRelations",
        "parameters": Array [],
        "type": "RelationThunkMap<any, TContext>",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "setRecordIdFn",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "fn",
            "type": "GetRecordIdFn<TSource, TContext>",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasRecordIdFn",
        "parameters": Array [],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getRecordIdFn",
        "parameters": Array [],
        "type": "GetRecordIdFn<TSource, TContext>",
      },
      Object {
        "documentation": "Get function that returns record id, from provided object.",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getRecordId",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "source",
            "type": "TSource",
          },
          Object {
            "documentation": "",
            "name": "args",
            "type": "ArgsMap",
          },
          Object {
            "documentation": "",
            "name": "context",
            "type": "TContext",
          },
        ],
        "type": "string | number",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "get",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "path",
            "type": "string | string[]",
          },
        ],
        "type": "any",
      },
    ],
    "name": "ObjectTypeComposer",
    "properties": Array [
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "schemaComposer",
        "type": "any",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": true,
          "readonly": false,
          "static": false,
        },
        "name": "gqType",
        "type": "any",
      },
    ],
    "staticMethods": Array [
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": true,
        },
        "name": "create",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "typeDef",
            "type": "any",
          },
          Object {
            "documentation": "",
            "name": "schemaComposer",
            "type": "any",
          },
        ],
        "type": "ObjectTypeComposer<TSrc, TCtx>",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": true,
        },
        "name": "createTemp",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "typeDef",
            "type": "any",
          },
          Object {
            "documentation": "",
            "name": "schemaComposer",
            "type": "any",
          },
        ],
        "type": "ObjectTypeComposer<TSrc, TCtx>",
      },
    ],
    "staticProperties": Array [],
    "type": "typeof ObjectTypeComposer",
  },
  "interfaces": Array [
    Object {
      "code": "

export type GetRecordIdFn<TSource, TContext> = (
  source: TSource,
  args: any,
  context: TContext
) => string;",
      "name": " GetRecordIdFn",
    },
    Object {
      "code": "

export type GraphQLObjectTypeExtended<TSource, TContext> = GraphQLObjectType & {
  _gqcInputTypeComposer?: InputTypeComposer<TContext>;
  _gqcResolvers?: Map<string, Resolver<TSource, TContext>>;
  _gqcGetRecordIdFn?: GetRecordIdFn<TSource, TContext>;
  _gqcRelations?: RelationThunkMap<TSource, TContext>;
  _gqcFields?: ComposeFieldConfigMap<TSource, TContext>;
  _gqcInterfaces?: Array<GraphQLInterfaceType | InterfaceTypeComposer<any, TContext>>;
  _gqcExtensions?: Extensions;
  description: string | null;
};",
      "name": " GraphQLObjectTypeExtended",
    },
    Object {
      "code": "

export type ComposeObjectTypeConfig<TSource, TContext> = {
  name: string;
  interfaces?: Thunk<GraphQLInterfaceType[] | null>;
  fields?: Thunk<ComposeFieldConfigMap<TSource, TContext>>;
  isTypeOf?: GraphQLIsTypeOfFn<TSource, TContext> | null;
  description?: string | null;
  isIntrospection?: boolean;
  extensions?: Extensions;
};",
      "name": " ComposeObjectTypeConfig",
    },
    Object {
      "code": "

// extended GraphQLFieldConfigMap
export type ComposeFieldConfigMap<TSource, TContext> = ObjMap<
  ComposeFieldConfig<TSource, TContext>
>;",
      "name": " ComposeFieldConfigMap",
    },
    Object {
      "code": "

export type ComposeFieldConfig<TSource, TContext, TArgs = ArgsMap> =
  | ComposeFieldConfigAsObject<TSource, TContext, TArgs>
  | ComposeOutputType<any /* TReturn */, TContext>
  | Thunk<
      | ComposeFieldConfigAsObject<TSource, TContext, TArgs>
      | ComposeOutputType<any /* TReturn */, TContext>
    >;",
      "name": " ComposeFieldConfig",
    },
    Object {
      "code": "

// extended GraphQLFieldConfig
export type GraphqlFieldConfigExtended<TSource, TContext> = GraphQLFieldConfig<
  TSource,
  TContext
> & { projection?: any };",
      "name": " GraphqlFieldConfigExtended",
    },
    Object {
      "code": "

export type ComposeFieldConfigAsObject<TSource, TContext, TArgs = ArgsMap> = {
  type: Thunk<ComposeOutputType<any /* TReturn */, TContext>> | GraphQLOutputType;
  args?: ComposeFieldConfigArgumentMap<TArgs>;
  resolve?: GraphQLFieldResolver<TSource, TContext, TArgs>;
  subscribe?: GraphQLFieldResolver<TSource, TContext>;
  deprecationReason?: string | null;
  description?: string | null;
  astNode?: FieldDefinitionNode | null;
  extensions?: Extensions;
  [key: string]: any;
} & { $call?: void };",
      "name": " ComposeFieldConfigAsObject",
    },
    Object {
      "code": "

// Output type should not have \`TSource\`. It should not affect on main Type source!
// extended GraphQLOutputType
export type ComposeOutputType<TReturn, TContext> =
  | GraphQLOutputType
  | ObjectTypeComposer<TReturn, TContext>
  | EnumTypeComposer<TContext>
  | ScalarTypeComposer<TContext>
  | TypeAsString
  | Resolver<any, TContext, any>
  | InterfaceTypeComposer<TReturn, TContext>
  | UnionTypeComposer<TReturn, TContext>
  | Array<
      | GraphQLOutputType
      | ObjectTypeComposer<TReturn, TContext>
      | EnumTypeComposer<TContext>
      | ScalarTypeComposer<TContext>
      | TypeAsString
      | Resolver<any, TContext, any>
      | InterfaceTypeComposer<TReturn, TContext>
      | UnionTypeComposer<TReturn, TContext>
    >;",
      "name": " ComposeOutputType",
    },
    Object {
      "code": "

// Compose Args -----------------------------
export type ArgsMap = { [argName: string]: any };",
      "name": " ArgsMap",
    },
    Object {
      "code": "
export type ComposeArgumentType =
  | GraphQLInputType
  | TypeAsString
  | InputTypeComposer<any>
  | EnumTypeComposer<any>
  | ScalarTypeComposer<any>
  | Array<
      | GraphQLInputType
      | TypeAsString
      | InputTypeComposer<any>
      | EnumTypeComposer<any>
      | ScalarTypeComposer<any>
    >;",
      "name": " ComposeArgumentType",
    },
    Object {
      "code": "

export type ComposeArgumentConfigAsObject = {
  type: Thunk<ComposeArgumentType> | GraphQLInputType;
  defaultValue?: any;
  description?: string | null;
  astNode?: InputValueDefinitionNode | null;
} & { $call?: void };",
      "name": " ComposeArgumentConfigAsObject",
    },
    Object {
      "code": "

export type ComposeArgumentConfig =
  | ComposeArgumentConfigAsObject
  | ComposeArgumentType
  | (() => ComposeArgumentConfigAsObject | ComposeArgumentType);",
      "name": " ComposeArgumentConfig",
    },
    Object {
      "code": "

export type ComposeFieldConfigArgumentMap<TArgs = ArgsMap> = {
  [argName in keyof TArgs]: ComposeArgumentConfig
};",
      "name": " ComposeFieldConfigArgumentMap",
    },
    Object {
      "code": "

// RELATION -----------------------------
export type RelationThunkMap<TSource, TContext> = {
  [fieldName: string]: Thunk<RelationOpts<TSource, TContext, ArgsMap>>;
};",
      "name": " RelationThunkMap",
    },
    Object {
      "code": "

export type RelationOpts<TRelationSource, TSource, TContext, TArgs = ArgsMap> =
  | RelationOptsWithResolver<TRelationSource, TSource, TContext, TArgs>
  | RelationOptsWithFieldConfig<TSource, TContext, TArgs>;",
      "name": " RelationOpts",
    },
    Object {
      "code": "

export type RelationOptsWithResolver<TRelationSource, TSource, TContext, TArgs = ArgsMap> = {
  resolver: Thunk<Resolver<TRelationSource, TContext, TArgs>>;
  prepareArgs?: RelationArgsMapper<TSource, TContext, TArgs>;
  projection?: Partial<ProjectionType>;
  description?: string | null;
  deprecationReason?: string | null;
  catchErrors?: boolean;
};",
      "name": " RelationOptsWithResolver",
    },
    Object {
      "code": "

export type RelationOptsWithFieldConfig<
  TSource,
  TContext,
  TArgs = ArgsMap
> = ComposeFieldConfigAsObject<TSource, TContext, TArgs> & {
  resolve: GraphQLFieldResolver<TSource, TContext, TArgs>;
};",
      "name": " RelationOptsWithFieldConfig",
    },
    Object {
      "code": "

export type RelationArgsMapperFn<TSource, TContext, TArgs = ArgsMap> = (
  source: TSource,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => any;",
      "name": " RelationArgsMapperFn",
    },
    Object {
      "code": "

export type RelationArgsMapper<TSource, TContext, TArgs = ArgsMap> = {
  [argName: string]:
    | { [key: string]: any }
    | RelationArgsMapperFn<TSource, TContext, TArgs>
    | null
    | void
    | string
    | number
    | any[];
};",
      "name": " RelationArgsMapper",
    },
    Object {
      "code": "

export type ObjectTypeComposeDefinition<TSource, TContext> =
  | TypeAsString
  | ComposeObjectTypeConfig<TSource, TContext>
  | GraphQLObjectType;",
      "name": " ObjectTypeComposeDefinition",
    },
  ],
}
`);
});
