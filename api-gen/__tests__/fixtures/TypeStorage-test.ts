import TSClassParser from '../../TSClassParser';
import MarkdownGenerator from '../../MarkdownGenerator';

const file = 'api-gen/__tests__/fixtures/TypeStorage.d.ts';

it('markdown TypeStorage.d.ts', () => {
  const data = TSClassParser.parseFile(file);
  expect(MarkdownGenerator.generate(data.class, data.interfaces)).toMatchInlineSnapshot(`
"---
id: TypeStorage
title: TypeStorage
---

<!-- 
ðŸ›‘ðŸ›‘ðŸ›‘
DO NOT EDIT THIS FILE!
IT WAS AUTOGENERATED FROM d.ts FILE

If you want to make changes in this file, please do it via
https://github.com/graphql-compose/graphql-compose/blob/master/src/TypeStorage.d.ts
-->

This is TypeStorage class
Helps to create any type
[Go TO](http://graphql.org)

## Static properties

### static statProperty

\`\`\`js
static statProperty: boolean;
\`\`\`

## Static methods

### static findMany()

\`\`\`js
static findMany(
  q: any,
): string[]
\`\`\`

## Properties

### types

\`\`\`js
types: Map<K, V>;
\`\`\`

### size

\`\`\`js
readonly size: number;
\`\`\`

## Methods

### clear()

\`\`\`js
clear(): void
\`\`\`

### delete()

\`\`\`js
delete(
  key: K,
): boolean
\`\`\`

### entries()

\`\`\`js
entries(): Iterator<[K, V]>
\`\`\`

### forEach()

\`\`\`js
forEach(
  callbackfn: (value: V, index: K, map: Map<K, V>) => any,
  thisArg: any,
): void
\`\`\`

### get()

\`\`\`js
get(
  key: K,
): V
\`\`\`

### has()

\`\`\`js
has(
  key: K,
): boolean
\`\`\`

### keys()

\`\`\`js
keys(): Iterator<K>
\`\`\`

### set()

Set value to storage

\`\`\`js
set(
  key: K,
  value: V,
): this
\`\`\`

### values()

\`\`\`js
values(): Iterator<V>
\`\`\`

### add()

\`\`\`js
add(
  value: V,
): string
\`\`\`

## Custom methods

### hasInstance()

Ok

\`\`\`js
hasInstance(
  key: K,
  ClassObj: any,
): boolean
\`\`\`

### getOrSet()

\`\`\`js
getOrSet(
  key: K,
  typeOrThunk: V | (() => V),
): V
\`\`\`

"
`);
});

it('parse TypeStorage.d.ts', () => {
  expect(TSClassParser.parseFile(file)).toMatchInlineSnapshot(`
Object {
  "class": Object {
    "constructors": Array [
      Object {
        "documentation": "",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "test",
            "type": "boolean",
          },
        ],
        "type": "TypeStorage<K, V>",
      },
    ],
    "documentation": "This is TypeStorage class
Helps to create any type
[Go TO](http://graphql.org)",
    "methods": Array [
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "clear",
        "parameters": Array [],
        "type": "void",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "delete",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "key",
            "type": "K",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "entries",
        "parameters": Array [],
        "type": "Iterator<[K, V]>",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "forEach",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "callbackfn",
            "type": "(value: V, index: K, map: Map<K, V>) => any",
          },
          Object {
            "documentation": "",
            "name": "thisArg",
            "type": "any",
          },
        ],
        "type": "void",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "get",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "key",
            "type": "K",
          },
        ],
        "type": "V",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "has",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "key",
            "type": "K",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "keys",
        "parameters": Array [],
        "type": "Iterator<K>",
      },
      Object {
        "documentation": "Set value to storage",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "set",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "key",
            "type": "K",
          },
          Object {
            "documentation": "",
            "name": "value",
            "type": "V",
          },
        ],
        "type": "this",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "values",
        "parameters": Array [],
        "type": "Iterator<V>",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "add",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "value",
            "type": "V",
          },
        ],
        "type": "string",
      },
      Object {
        "documentation": "-----------------------------------------------
Custom methods
-----------------------------------------------
Ok",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "hasInstance",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "key",
            "type": "K",
          },
          Object {
            "documentation": "",
            "name": "ClassObj",
            "type": "any",
          },
        ],
        "type": "boolean",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "getOrSet",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "key",
            "type": "K",
          },
          Object {
            "documentation": "",
            "name": "typeOrThunk",
            "type": "V | (() => V)",
          },
        ],
        "type": "V",
      },
    ],
    "name": "TypeStorage",
    "properties": Array [
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "types",
        "type": "Map<K, V>",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": true,
          "static": false,
        },
        "name": "size",
        "type": "number",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": true,
          "readonly": false,
          "static": false,
        },
        "name": "prot",
        "type": "number",
      },
      Object {
        "documentation": "",
        "flags": Object {
          "private": true,
          "protected": false,
          "readonly": false,
          "static": false,
        },
        "name": "priv",
        "type": "number",
      },
    ],
    "staticMethods": Array [
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": true,
        },
        "name": "findMany",
        "parameters": Array [
          Object {
            "documentation": "",
            "name": "q",
            "type": "any",
          },
        ],
        "type": "string[]",
      },
    ],
    "staticProperties": Array [
      Object {
        "documentation": "",
        "flags": Object {
          "private": false,
          "protected": false,
          "readonly": false,
          "static": true,
        },
        "name": "statProperty",
        "type": "boolean",
      },
    ],
    "type": "typeof TypeStorage",
  },
  "interfaces": Array [],
}
`);
});
